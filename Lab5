/**
 * lab05 - Sorting
 *
 * @author
 */

import java.util.Arrays;

public class Lab5 {

    /**
     * this method squares each entry in the array and then sorts it*
     *
     * @param arr TODO
     * @return TODO
     */
    public static int[] sortedSquaredArray(int[] arr) {
        //TODO complete this function, remove this line when you start
        int[] other = new int[arr.length];
        for(int i = 0; i < other.length; i++) {
            other[i] = arr[i] + arr[i];
        }
        int[] output = new int[arr.length];
        int number = -1;
        int index = -1;
        for(int i = 0; i < output.length; i++) {
            number = findGreatest(other);
            index = getIndex(other,number);
            output[i] = number;
            other[i] = 0;
        }
        return output;
    }

    public static int getIndex(int[] arr, int input) {
        for(int i = 0; i < arr.length; i++) {
            if(arr.length==input) {
                return i;
            }
        }
        return -1;
    }

    public static int findGreatest(int[] arr) {
        int num = arr[0];
        for(int i = 1; i < arr.length; i++) {
            if(num > arr[i]) {
                num = arr[i];
            }
        }
        return num;
    }

    /**
     * This method decides if two Strings are anagrams*
     *
     * @param str1 TODO
     * @param str2 TODO
     * @return TODO
     */
    public static boolean isAnagram(String str1, String str2) {
        //TODO complete this function, remove this line when you start
        // Use the helper function(stringToCharacterArray()) to convert the strings to Character arrays
        // Java's toCharArray() will give you char[] not Character[]
        String first = str1.toLowerCase();
        String second = str2.toLowerCase();
        // Use the helper function(stringToCharacterArray()) to convert the strings to Character arrays
        // Java's toCharArray() will give you char[] not Character[]
        if(str1.length()!=str2.length()) {
            return false;
        }

        char[] alphabet = new char[26];
        for(int i = 97; i <= 122; i++) {
            alphabet[i-97] = (char) i;
        }

        int[] counts1 = new int[26];
        for(int j = 0; j < first.length(); j++) {
            int num = (int) first.charAt(j);
            counts1[num-97]++;
        }

        int[] counts2 = new int[26];
        for(int k = 0; k < second.length(); k++) {
            int number = (int) second.charAt(k);
            counts2[number-97]++;
        }

        for(int m = 0; m < counts1.length; m++) {
            if(counts1[m]!=counts2[m]) {
                return false;
            }
        }

        return true;
    }

    /**
     * helper function converts a string to a Character[] array *
     *
     * @param str string to convert
     * @return a Character array
     */
    public static Character[] stringToCharacterArray(String str) {
        return str.chars().mapToObj(c -> (char) c).toArray(Character[]::new);
    }

    /**
     * sorting function that implements quicksort*
     *
     * @param unsorted unsorted array
     * @param <T>      Generic data type (Integer, String, Character)...
     */
    public static <T extends Comparable<T>> void sort(T[] unsorted) {
        quickSort(unsorted, 0, unsorted.length - 1);
    }

    /**
     * Recursively quick sorting the array by randomPartitioning*
     *
     * @param unsorted unsorted array
     * @param left     left boundary
     * @param right    right boundary
     * @param <T>      data type T
     */
    public static <T extends Comparable<T>> void quickSort(T[] unsorted, int left, int right) {
        //TODO
        // Complete the quicksort logic here
        // pivot assignment should call the randomPartition helper function
        // figure out the new left and right boundary based on the pivot
        if(left < right) {
            int p = partition(unsorted, left, right);
            quickSort(unsorted, left, p-1);
            quickSort(unsorted, p, right);
        }
    }

    /**
     * random partitioning with Math.random() function to generate a random index *
     * *
     *
     * @param unsorted unsorted array
     * @param left     left pointer
     * @param right    right pointer
     * @param <T>      data type T
     * @return perform sorting and return the index of pivot
     */
    public static <T extends Comparable<T>> int randomPartition(T[] unsorted, int left, int right) {
        int randomIndex = left + (int) (Math.random() * (right - left + 1));
        swap(unsorted, randomIndex, right);
        return partition(unsorted, left, right);
    }

    /**
     * Helper function to swap the elements in the array *
     *
     * @param arr given array
     * @param i   index i
     * @param j   index j
     * @param <T> data type T
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    /**
     * partition function for quick sort *
     *
     * @param arr   array to be sorted
     * @param left  left boundary
     * @param right right boundary
     * @param <T>   generic data type T
     * @return pivot index
     */
    public static <T extends Comparable<T>> int partition(T[] arr, int left, int right) {
        T pivot = arr[left + right >> 1]; // -> the element in the middle, not the pivot index

        //When comparing generic data from the array, use the compareTo() function instead of equality operators
        //compareTo return a boolean value, and boolean can also represent by -1, 0, 1

        while (left <= right) {
            //TODO complete this function, remove this line when you start
            //1. keep checking left element in the array if is less than pivot, update the left boundary
            while(arr[left].compareTo(pivot)<0) {
                left++;
            }

            //2. keep checking pivot if is less than the right element in the array, update the right boundary
            while(arr[right].compareTo(pivot)>0) {
                right--;
            }
            //3. check left with right -> what should be the if-condition?
            //then swap elements and update both boundary
            while(arr[left].compareTo(arr[right])<=0) {
                swap(arr, left, right);
                left++;
                right--;
            }
        }
        return left;
    }

    /**
     * Helper function to print array*
     *
     * @param arr array to print out
     */
    public static void print(Object[] arr) {
        System.out.println(Arrays.toString(arr));
    }


    public static void main(String[] args) {
        //Test your sort if it is working
        //Integer[] arr = {13, 44, 11, 3, 0, 3, 5, 1, 2, 40, 7, 1, 19, 2, 84, 111, 5};
        //print(arr);
        //sort(arr);
        //print(arr);
        //sorted [0, 1, 1, 2, 2, 3, 3, 5, 5, 7, 11, 13, 19, 40, 44, 84, 111]

        //Character[] charArr = new Character[]{'x', 'c', 'a', 'z', 'o'};
        //print(charArr);
        //sort(charArr);
        //print(charArr);
        //sorted [a, c, o, x, z]


        //Test your functions here...
        int[] nums = {1,3,2};
        int[] array = sortedSquaredArray(nums);
        for(int i = 0; i < array.length; i++) {
            System.out.print(array[i] + ", ");
        }
    }
}
