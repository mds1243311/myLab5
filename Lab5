/**
 * lab05 - Sorting
 *
 * @author
 */

import java.util.Arrays;

public class Lab5 {

    /**
     * Sorts the values of a squared int[] and return them int non-decreasing order.*
     *
     * @param arr TODO
     * @return TODO
     */
    public static int[] sortedSquaredArray(int[] arr) {
        //TODO complete this function, remove this line when you start

        for(int i = 0; i < arr.length; i++) {
            arr[i] = arr[i] * arr[i];
        }
        qSort(arr,0, arr.length-1);



        //You don't have to modify this part, this just convert int[] to Integer[], vice versa
        Integer[] intArr = Arrays.stream(arr).boxed().toArray(Integer[]::new);
        sort(intArr);
        //return Arrays.stream(intArr).mapToInt(Integer::intValue).toArray();
        return arr;
    }

    /**
     * the qSort method sorts int[] with quickSort
     * @param nums
     * @param leftIndex
     * @param rightIndex
     * @return
     */
    public static int[] qSort(int[] nums, int leftIndex, int rightIndex) {
        int partitionSize = rightIndex - leftIndex + 1;
        if(partitionSize <= 1)
            return null;

        int pivot = nums[(leftIndex + rightIndex) / 2];
        int i = leftIndex;
        int j = rightIndex;

        do {
            while (nums[i] < pivot)
                i++;
            while (nums[j] > pivot)
                j--;
            if(i<=j)
            {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                i++;
                j--;
            }
        } while(i<=j);

        qSort(nums, leftIndex, j);
        qSort(nums, i, rightIndex);

        return nums;
    }

    /**
     * Description...*
     *
     * @param str1 TODO
     * @param str2 TODO
     * @return TODO
     */
    public static boolean isAnagram(String str1, String str2) {
        //TODO complete this function, remove this line when you start
        // Use the helper function(stringToCharacterArray()) to convert the strings to Character arrays
        // Java's toCharArray() will give you char[] not Character[]
        str1 = str1.toLowerCase();
        str2 = str2.toLowerCase();

        if(str1.length() != str2.length()) {
            return false;
        }

        int[] alphabet1 = new int[26];
        int[] alphabet2 = new int[26];

        for(int i = 0; i < str1.length(); i++) {
            int num = (int) str1.charAt(i) - 97;
            alphabet1[num]++;
        }

        for(int i = 0; i < str2.length(); i++) {
            int number = (int) str2.charAt(i) - 97;
            alphabet2[number]++;
        }

        if(similar(alphabet1,alphabet2)==false) {
            return false;
        }

        return true;
    }

    /**
     * I am writing this method to determine whether two integer arrays are the same...
     * @param n1
     * @param n2
     * @return
     */
    public static boolean similar(int[] n1, int[] n2) {
        if(n1.length != n2.length) {
            return false;
        }

        for(int i = 0; i < n1.length; i++) {
            if(n1[i] != n2[i]) {
                return false;
            }
        }

        return true;
    }

    /**
     * helper function converts a string to a Character[] array *
     *
     * @param str string to convert
     * @return a Character array
     */
    public static Character[] stringToCharacterArray(String str) {
        return str.chars().mapToObj(c -> (char) c).toArray(Character[]::new);
    }

    /**
     * sorting function that implements quicksort*
     *
     * @param unsorted unsorted array
     * @param <T>      Generic data type (Integer, String, Character)...
     */
    public static <T extends Comparable<T>> void sort(T[] unsorted) {
        quickSort(unsorted, 0, unsorted.length - 1);
    }

    /**
     * Recursively quick sorting the array by randomPartitioning*
     *
     * @param unsorted unsorted array
     * @param left     left boundary
     * @param right    right boundary
     * @param <T>      data type T
     */
    public static <T extends Comparable<T>> void quickSort(T[] unsorted, int left, int right) {
        //TODO
        // Complete the quicksort logic here
        // pivot assignment should call the randomPartition helper function
        // figure out the new left and right boundary based on the pivot
        int partitionSize = right - left + 1;
        if(partitionSize <= 1)
            return;
        
        
        T pivotValue = unsorted[(left+right)/2];
        int i = left;
        int j = right;
        
        do {
            while(unsorted[i].compareTo(pivotValue)<0)
                i++;
            while(unsorted[j].compareTo(pivotValue)>0)
                j--;
            if(i<=j)
            {
                T temp = unsorted[i];
                unsorted[i] = unsorted[j];
                unsorted[j] = temp;
                i++;
                j--;
            }
        } while(i<=j);
        
        quickSort(unsorted, left, j);
        quickSort(unsorted, i, right);
    }

    /**
     * random partitioning with Math.random() function to generate a random index *
     * *
     *
     * @param unsorted unsorted array
     * @param left     left pointer
     * @param right    right pointer
     * @param <T>      data type T
     * @return perform sorting and return the index of pivot
     */
    public static <T extends Comparable<T>> int randomPartition(T[] unsorted, int left, int right) {
        int randomIndex = left + (int) (Math.random() * (right - left + 1));
        swap(unsorted, randomIndex, right);
        return partition(unsorted, left, right);
    }

    /**
     * Helper function to swap the elements in the array *
     *
     * @param arr given array
     * @param i   index i
     * @param j   index j
     * @param <T> data type T
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    /**
     * partition function for quick sort *
     *
     * @param arr   array to be sorted
     * @param left  left boundary
     * @param right right boundary
     * @param <T>   generic data type T
     * @return pivot index
     */
    public static <T extends Comparable<T>> int partition(T[] arr, int left, int right) {
        T pivot = arr[left + right >> 1]; // -> the element in the middle, not the pivot index

        //When comparing generic data from the array, use the compareTo() function instead of equality operators
        //compareTo return a boolean value, and boolean can also represent by -1, 0, 1

        while (left <= right) {
            //TODO complete this function, remove this line when you start
            //1. keep checking left element in the array if is less than pivot, update the left boundary
            while(arr[left].compareTo(pivot)<0) {
                left++;
            }
            //2. keep checking pivot if is less than the right element in the array, update the right boundary
            while(arr[right].compareTo(pivot)>0) {
                right--;
            }
            //3. check left with right -> what should be the if-condition?
            //then swap elements and update both boundary
            if(arr[left].compareTo(arr[right])<=0) {
                swap(arr,left,right);
                left++;
                right--;
            }
        }
        return left;
    }

    /**
     * Helper function to print array*
     *
     * @param arr array to print out
     */
    public static void print(Object[] arr) {
        System.out.println(Arrays.toString(arr));
    }


    public static void main(String[] args) {
        //Test your sort if it is working
        Integer[] arr = {13, 44, 11, 3, 0, 3, 5, 1, 2, 40, 7, 1, 19, 2, 84, 111, 5};
        print(arr);
        sort(arr);
        print(arr);
        //sorted [0, 1, 1, 2, 2, 3, 3, 5, 5, 7, 11, 13, 19, 40, 44, 84, 111]

        Character[] charArr = new Character[]{'x', 'c', 'a', 'z', 'o'};
        print(charArr);
        sort(charArr);
        print(charArr);
        //sorted [a, c, o, x, z]


        //Test your functions here...
    }
}
